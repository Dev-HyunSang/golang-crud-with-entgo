// Code generated by ent, DO NOT EDIT.

package todo

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/dev-hyunsang/golang-crud-with-entgo/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// TodoUUID applies equality check predicate on the "todo_uuid" field. It's identical to TodoUUIDEQ.
func TodoUUID(v uuid.UUID) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTodoUUID), v))
	})
}

// Todo applies equality check predicate on the "todo" field. It's identical to TodoEQ.
func Todo(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTodo), v))
	})
}

// Done applies equality check predicate on the "done" field. It's identical to DoneEQ.
func Done(v bool) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDone), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// EditedAt applies equality check predicate on the "edited_at" field. It's identical to EditedAtEQ.
func EditedAt(v time.Time) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEditedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// TodoUUIDEQ applies the EQ predicate on the "todo_uuid" field.
func TodoUUIDEQ(v uuid.UUID) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTodoUUID), v))
	})
}

// TodoUUIDNEQ applies the NEQ predicate on the "todo_uuid" field.
func TodoUUIDNEQ(v uuid.UUID) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTodoUUID), v))
	})
}

// TodoUUIDIn applies the In predicate on the "todo_uuid" field.
func TodoUUIDIn(vs ...uuid.UUID) predicate.ToDo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTodoUUID), v...))
	})
}

// TodoUUIDNotIn applies the NotIn predicate on the "todo_uuid" field.
func TodoUUIDNotIn(vs ...uuid.UUID) predicate.ToDo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTodoUUID), v...))
	})
}

// TodoUUIDGT applies the GT predicate on the "todo_uuid" field.
func TodoUUIDGT(v uuid.UUID) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTodoUUID), v))
	})
}

// TodoUUIDGTE applies the GTE predicate on the "todo_uuid" field.
func TodoUUIDGTE(v uuid.UUID) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTodoUUID), v))
	})
}

// TodoUUIDLT applies the LT predicate on the "todo_uuid" field.
func TodoUUIDLT(v uuid.UUID) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTodoUUID), v))
	})
}

// TodoUUIDLTE applies the LTE predicate on the "todo_uuid" field.
func TodoUUIDLTE(v uuid.UUID) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTodoUUID), v))
	})
}

// TodoEQ applies the EQ predicate on the "todo" field.
func TodoEQ(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTodo), v))
	})
}

// TodoNEQ applies the NEQ predicate on the "todo" field.
func TodoNEQ(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTodo), v))
	})
}

// TodoIn applies the In predicate on the "todo" field.
func TodoIn(vs ...string) predicate.ToDo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTodo), v...))
	})
}

// TodoNotIn applies the NotIn predicate on the "todo" field.
func TodoNotIn(vs ...string) predicate.ToDo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTodo), v...))
	})
}

// TodoGT applies the GT predicate on the "todo" field.
func TodoGT(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTodo), v))
	})
}

// TodoGTE applies the GTE predicate on the "todo" field.
func TodoGTE(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTodo), v))
	})
}

// TodoLT applies the LT predicate on the "todo" field.
func TodoLT(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTodo), v))
	})
}

// TodoLTE applies the LTE predicate on the "todo" field.
func TodoLTE(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTodo), v))
	})
}

// TodoContains applies the Contains predicate on the "todo" field.
func TodoContains(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTodo), v))
	})
}

// TodoHasPrefix applies the HasPrefix predicate on the "todo" field.
func TodoHasPrefix(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTodo), v))
	})
}

// TodoHasSuffix applies the HasSuffix predicate on the "todo" field.
func TodoHasSuffix(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTodo), v))
	})
}

// TodoEqualFold applies the EqualFold predicate on the "todo" field.
func TodoEqualFold(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTodo), v))
	})
}

// TodoContainsFold applies the ContainsFold predicate on the "todo" field.
func TodoContainsFold(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTodo), v))
	})
}

// DoneEQ applies the EQ predicate on the "done" field.
func DoneEQ(v bool) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDone), v))
	})
}

// DoneNEQ applies the NEQ predicate on the "done" field.
func DoneNEQ(v bool) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDone), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ToDo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ToDo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// EditedAtEQ applies the EQ predicate on the "edited_at" field.
func EditedAtEQ(v time.Time) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEditedAt), v))
	})
}

// EditedAtNEQ applies the NEQ predicate on the "edited_at" field.
func EditedAtNEQ(v time.Time) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEditedAt), v))
	})
}

// EditedAtIn applies the In predicate on the "edited_at" field.
func EditedAtIn(vs ...time.Time) predicate.ToDo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEditedAt), v...))
	})
}

// EditedAtNotIn applies the NotIn predicate on the "edited_at" field.
func EditedAtNotIn(vs ...time.Time) predicate.ToDo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEditedAt), v...))
	})
}

// EditedAtGT applies the GT predicate on the "edited_at" field.
func EditedAtGT(v time.Time) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEditedAt), v))
	})
}

// EditedAtGTE applies the GTE predicate on the "edited_at" field.
func EditedAtGTE(v time.Time) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEditedAt), v))
	})
}

// EditedAtLT applies the LT predicate on the "edited_at" field.
func EditedAtLT(v time.Time) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEditedAt), v))
	})
}

// EditedAtLTE applies the LTE predicate on the "edited_at" field.
func EditedAtLTE(v time.Time) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEditedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.ToDo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.ToDo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ToDo) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ToDo) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ToDo) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		p(s.Not())
	})
}
