// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dev-hyunsang/golang-crud-with-entgo/ent/predicate"
	"github.com/dev-hyunsang/golang-crud-with-entgo/ent/todo"
	"github.com/google/uuid"
)

// ToDoUpdate is the builder for updating ToDo entities.
type ToDoUpdate struct {
	config
	hooks    []Hook
	mutation *ToDoMutation
}

// Where appends a list predicates to the ToDoUpdate builder.
func (tdu *ToDoUpdate) Where(ps ...predicate.ToDo) *ToDoUpdate {
	tdu.mutation.Where(ps...)
	return tdu
}

// SetTodoUUID sets the "todo_uuid" field.
func (tdu *ToDoUpdate) SetTodoUUID(u uuid.UUID) *ToDoUpdate {
	tdu.mutation.SetTodoUUID(u)
	return tdu
}

// SetNillableTodoUUID sets the "todo_uuid" field if the given value is not nil.
func (tdu *ToDoUpdate) SetNillableTodoUUID(u *uuid.UUID) *ToDoUpdate {
	if u != nil {
		tdu.SetTodoUUID(*u)
	}
	return tdu
}

// SetTodo sets the "todo" field.
func (tdu *ToDoUpdate) SetTodo(s string) *ToDoUpdate {
	tdu.mutation.SetTodo(s)
	return tdu
}

// SetNillableTodo sets the "todo" field if the given value is not nil.
func (tdu *ToDoUpdate) SetNillableTodo(s *string) *ToDoUpdate {
	if s != nil {
		tdu.SetTodo(*s)
	}
	return tdu
}

// SetDone sets the "done" field.
func (tdu *ToDoUpdate) SetDone(b bool) *ToDoUpdate {
	tdu.mutation.SetDone(b)
	return tdu
}

// SetNillableDone sets the "done" field if the given value is not nil.
func (tdu *ToDoUpdate) SetNillableDone(b *bool) *ToDoUpdate {
	if b != nil {
		tdu.SetDone(*b)
	}
	return tdu
}

// SetCreatedAt sets the "created_at" field.
func (tdu *ToDoUpdate) SetCreatedAt(t time.Time) *ToDoUpdate {
	tdu.mutation.SetCreatedAt(t)
	return tdu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tdu *ToDoUpdate) SetNillableCreatedAt(t *time.Time) *ToDoUpdate {
	if t != nil {
		tdu.SetCreatedAt(*t)
	}
	return tdu
}

// SetEditedAt sets the "edited_at" field.
func (tdu *ToDoUpdate) SetEditedAt(t time.Time) *ToDoUpdate {
	tdu.mutation.SetEditedAt(t)
	return tdu
}

// SetNillableEditedAt sets the "edited_at" field if the given value is not nil.
func (tdu *ToDoUpdate) SetNillableEditedAt(t *time.Time) *ToDoUpdate {
	if t != nil {
		tdu.SetEditedAt(*t)
	}
	return tdu
}

// SetDeletedAt sets the "deleted_at" field.
func (tdu *ToDoUpdate) SetDeletedAt(t time.Time) *ToDoUpdate {
	tdu.mutation.SetDeletedAt(t)
	return tdu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tdu *ToDoUpdate) SetNillableDeletedAt(t *time.Time) *ToDoUpdate {
	if t != nil {
		tdu.SetDeletedAt(*t)
	}
	return tdu
}

// Mutation returns the ToDoMutation object of the builder.
func (tdu *ToDoUpdate) Mutation() *ToDoMutation {
	return tdu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tdu *ToDoUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tdu.hooks) == 0 {
		affected, err = tdu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ToDoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tdu.mutation = mutation
			affected, err = tdu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tdu.hooks) - 1; i >= 0; i-- {
			if tdu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tdu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tdu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tdu *ToDoUpdate) SaveX(ctx context.Context) int {
	affected, err := tdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tdu *ToDoUpdate) Exec(ctx context.Context) error {
	_, err := tdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tdu *ToDoUpdate) ExecX(ctx context.Context) {
	if err := tdu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tdu *ToDoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   todo.Table,
			Columns: todo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: todo.FieldID,
			},
		},
	}
	if ps := tdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tdu.mutation.TodoUUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: todo.FieldTodoUUID,
		})
	}
	if value, ok := tdu.mutation.Todo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: todo.FieldTodo,
		})
	}
	if value, ok := tdu.mutation.Done(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: todo.FieldDone,
		})
	}
	if value, ok := tdu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: todo.FieldCreatedAt,
		})
	}
	if value, ok := tdu.mutation.EditedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: todo.FieldEditedAt,
		})
	}
	if value, ok := tdu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: todo.FieldDeletedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{todo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ToDoUpdateOne is the builder for updating a single ToDo entity.
type ToDoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ToDoMutation
}

// SetTodoUUID sets the "todo_uuid" field.
func (tduo *ToDoUpdateOne) SetTodoUUID(u uuid.UUID) *ToDoUpdateOne {
	tduo.mutation.SetTodoUUID(u)
	return tduo
}

// SetNillableTodoUUID sets the "todo_uuid" field if the given value is not nil.
func (tduo *ToDoUpdateOne) SetNillableTodoUUID(u *uuid.UUID) *ToDoUpdateOne {
	if u != nil {
		tduo.SetTodoUUID(*u)
	}
	return tduo
}

// SetTodo sets the "todo" field.
func (tduo *ToDoUpdateOne) SetTodo(s string) *ToDoUpdateOne {
	tduo.mutation.SetTodo(s)
	return tduo
}

// SetNillableTodo sets the "todo" field if the given value is not nil.
func (tduo *ToDoUpdateOne) SetNillableTodo(s *string) *ToDoUpdateOne {
	if s != nil {
		tduo.SetTodo(*s)
	}
	return tduo
}

// SetDone sets the "done" field.
func (tduo *ToDoUpdateOne) SetDone(b bool) *ToDoUpdateOne {
	tduo.mutation.SetDone(b)
	return tduo
}

// SetNillableDone sets the "done" field if the given value is not nil.
func (tduo *ToDoUpdateOne) SetNillableDone(b *bool) *ToDoUpdateOne {
	if b != nil {
		tduo.SetDone(*b)
	}
	return tduo
}

// SetCreatedAt sets the "created_at" field.
func (tduo *ToDoUpdateOne) SetCreatedAt(t time.Time) *ToDoUpdateOne {
	tduo.mutation.SetCreatedAt(t)
	return tduo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tduo *ToDoUpdateOne) SetNillableCreatedAt(t *time.Time) *ToDoUpdateOne {
	if t != nil {
		tduo.SetCreatedAt(*t)
	}
	return tduo
}

// SetEditedAt sets the "edited_at" field.
func (tduo *ToDoUpdateOne) SetEditedAt(t time.Time) *ToDoUpdateOne {
	tduo.mutation.SetEditedAt(t)
	return tduo
}

// SetNillableEditedAt sets the "edited_at" field if the given value is not nil.
func (tduo *ToDoUpdateOne) SetNillableEditedAt(t *time.Time) *ToDoUpdateOne {
	if t != nil {
		tduo.SetEditedAt(*t)
	}
	return tduo
}

// SetDeletedAt sets the "deleted_at" field.
func (tduo *ToDoUpdateOne) SetDeletedAt(t time.Time) *ToDoUpdateOne {
	tduo.mutation.SetDeletedAt(t)
	return tduo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tduo *ToDoUpdateOne) SetNillableDeletedAt(t *time.Time) *ToDoUpdateOne {
	if t != nil {
		tduo.SetDeletedAt(*t)
	}
	return tduo
}

// Mutation returns the ToDoMutation object of the builder.
func (tduo *ToDoUpdateOne) Mutation() *ToDoMutation {
	return tduo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tduo *ToDoUpdateOne) Select(field string, fields ...string) *ToDoUpdateOne {
	tduo.fields = append([]string{field}, fields...)
	return tduo
}

// Save executes the query and returns the updated ToDo entity.
func (tduo *ToDoUpdateOne) Save(ctx context.Context) (*ToDo, error) {
	var (
		err  error
		node *ToDo
	)
	if len(tduo.hooks) == 0 {
		node, err = tduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ToDoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tduo.mutation = mutation
			node, err = tduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tduo.hooks) - 1; i >= 0; i-- {
			if tduo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tduo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tduo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ToDo)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ToDoMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tduo *ToDoUpdateOne) SaveX(ctx context.Context) *ToDo {
	node, err := tduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tduo *ToDoUpdateOne) Exec(ctx context.Context) error {
	_, err := tduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tduo *ToDoUpdateOne) ExecX(ctx context.Context) {
	if err := tduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tduo *ToDoUpdateOne) sqlSave(ctx context.Context) (_node *ToDo, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   todo.Table,
			Columns: todo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: todo.FieldID,
			},
		},
	}
	id, ok := tduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ToDo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, todo.FieldID)
		for _, f := range fields {
			if !todo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != todo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tduo.mutation.TodoUUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: todo.FieldTodoUUID,
		})
	}
	if value, ok := tduo.mutation.Todo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: todo.FieldTodo,
		})
	}
	if value, ok := tduo.mutation.Done(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: todo.FieldDone,
		})
	}
	if value, ok := tduo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: todo.FieldCreatedAt,
		})
	}
	if value, ok := tduo.mutation.EditedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: todo.FieldEditedAt,
		})
	}
	if value, ok := tduo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: todo.FieldDeletedAt,
		})
	}
	_node = &ToDo{config: tduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{todo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
