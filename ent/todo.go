// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/dev-hyunsang/golang-crud-with-entgo/ent/todo"
	"github.com/google/uuid"
)

// ToDo is the model entity for the ToDo schema.
type ToDo struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TodoUUID holds the value of the "todo_uuid" field.
	TodoUUID uuid.UUID `json:"todo_uuid,omitempty"`
	// Todo holds the value of the "todo" field.
	Todo string `json:"todo,omitempty"`
	// Done holds the value of the "done" field.
	Done bool `json:"done,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// EditedAt holds the value of the "edited_at" field.
	EditedAt time.Time `json:"edited_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ToDo) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case todo.FieldDone:
			values[i] = new(sql.NullBool)
		case todo.FieldID:
			values[i] = new(sql.NullInt64)
		case todo.FieldTodo:
			values[i] = new(sql.NullString)
		case todo.FieldCreatedAt, todo.FieldEditedAt, todo.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case todo.FieldTodoUUID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ToDo", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ToDo fields.
func (td *ToDo) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case todo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			td.ID = int(value.Int64)
		case todo.FieldTodoUUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field todo_uuid", values[i])
			} else if value != nil {
				td.TodoUUID = *value
			}
		case todo.FieldTodo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field todo", values[i])
			} else if value.Valid {
				td.Todo = value.String
			}
		case todo.FieldDone:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field done", values[i])
			} else if value.Valid {
				td.Done = value.Bool
			}
		case todo.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				td.CreatedAt = value.Time
			}
		case todo.FieldEditedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field edited_at", values[i])
			} else if value.Valid {
				td.EditedAt = value.Time
			}
		case todo.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				td.DeletedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this ToDo.
// Note that you need to call ToDo.Unwrap() before calling this method if this ToDo
// was returned from a transaction, and the transaction was committed or rolled back.
func (td *ToDo) Update() *ToDoUpdateOne {
	return (&ToDoClient{config: td.config}).UpdateOne(td)
}

// Unwrap unwraps the ToDo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (td *ToDo) Unwrap() *ToDo {
	_tx, ok := td.config.driver.(*txDriver)
	if !ok {
		panic("ent: ToDo is not a transactional entity")
	}
	td.config.driver = _tx.drv
	return td
}

// String implements the fmt.Stringer.
func (td *ToDo) String() string {
	var builder strings.Builder
	builder.WriteString("ToDo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", td.ID))
	builder.WriteString("todo_uuid=")
	builder.WriteString(fmt.Sprintf("%v", td.TodoUUID))
	builder.WriteString(", ")
	builder.WriteString("todo=")
	builder.WriteString(td.Todo)
	builder.WriteString(", ")
	builder.WriteString("done=")
	builder.WriteString(fmt.Sprintf("%v", td.Done))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(td.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("edited_at=")
	builder.WriteString(td.EditedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(td.DeletedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ToDos is a parsable slice of ToDo.
type ToDos []*ToDo

func (td ToDos) config(cfg config) {
	for _i := range td {
		td[_i].config = cfg
	}
}
